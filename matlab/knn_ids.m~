function varargout = knn_ids(varargin)
%KNN_IDS Trains a kNN
%   Author: HENRI DE PLAEN

%% PRELIMINARIES
assert(nargin==5,'Wrong number of inputs') ;
k = varargin{5} ;
TrainX = varargin{1} ; TrainY = varargin{2} ;
TestX = varargin{3} ; TestY = varargin{4} ;

%% DATASETS
n_train = size(TrainX,1) ;
assert(size(TrainY,1)==n_train,'Training sets not consistent') ;

n_test = size(TestX,1) ;
assert(size(TestY,1)==n_test,'Test sets not consistent') ;

assert(size(TestX,2)==size(TrainX,2),'Number of input variables not consistent between training and test set') ;

%changing 0 to -1
TrainY = double(TrainY) ;
TestY = double(TestY) ;

TrainY(TrainY==0) = -1 ;
TestY(TestY==0) = -1 ;

%% kNN DESIGN
Yte_ = zeros(N,1);
for idx = 1:n_train
        dist = sum((TrainX - ones(L,1)*TestX(idx,:)).^2,2);
        [~, idx_sortdist] = sort(dist);  
        n = hist(TrainY(indices(1:k)), Uc);
        [~, best] = max(n);
        result(idx_sortdist) = Uc(best);
    end

%% RETURN
varargout{1} = alpha ;
varargout{2} = b ;

%% TEST
test_acc = sum(TestY==Yte_sim)/numel(TestY) ;
test_adder = TestY+Yte_sim ;
test_tp = sum(test_adder== 2)/numel(TestY) ;
test_tn = sum(test_adder==-2)/numel(TestY) ;
test_substr = TestY-Yte_sim ;
test_fp = sum(test_substr== 2)/numel(TestY) ;
test_fn = sum(test_substr==-2)/numel(TestY) ;

fprintf('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n') ;
fprintf('%%%%%%  SVM RESULTS  %%%%%% \n') ;
fprintf('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \n \n') ;
fprintf(['C = ' num2str(gam) '\n']) ;
fprintf(['sigma = ' num2str(sig2) '\n \n']) ;

fprintf('TEST RESULTS\n') ;
fprintf(['Total accuracy = ' num2str(test_acc*100) '%%\n']) ;
fprintf(['TP = ' num2str(test_tp*100) '%%    ']) ;
fprintf(['TN = ' num2str(test_tn*100) '%%\n']) ;
fprintf(['FP = ' num2str(test_fp*100) '%%    ']) ;
fprintf(['FN = ' num2str(test_fn*100) '%%\n \n']) ;

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% function K = K_lin(x1,x2,~)
% %Author: HENRI DE PLAEN
%     assert(nummel(x1)==numel(x2)) ;
%     x1 = x1(:) ;
%     x2 = x2(:) ;
%     K = x1'*x2 ;
% end

function K = K_rbf(x1,x2,param)
%Author: HENRI DE PLAEN
    assert(numel(x1)==numel(x2)) ;
    norm2 = sum((x1-x2).^2) ;
    K = exp(-norm2/2/(param^2)) ;
end

